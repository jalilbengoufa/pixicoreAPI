// This is an example configuration file for the DHCPv4 server in Kea.
// It is a basic scenario with one IPv4 subnet configured. The subnet
// contains a single pool of dynamically allocated addresses.

{


"Control-agent": {
    "http-host": "127.0.0.1",
    "http-port": 8080,

    "control-sockets": {
        "dhcp4": {
            "socket-type": "unix",
            "socket-name": "/tmp/kea-dhcp4-ctrl.sock"
        }
//        "dhcp6": {
//            "socket-type": "unix",
//            "socket-name": "/tmp/kea-dhcp6-ctrl.sock"
//        }
    }
},





"Dhcp4": {


 "control-socket": {

        "socket-type": "unix",

        "socket-name": "/tmp/kea-dhcp4-ctrl.sock"

        },

 "hooks-libraries": [
        {
            "library": "/usr/local/lib/hooks/libdhcp_lease_cmds.so"
        }
],


// Kea is told to listen on ethX interface only.
 "interfaces-config": {
   "interfaces": [ "$__INTERFACE__" ]
 },
//
// We need to specify the the database used to store leases. As of
// September 2016, four database backends are supported: MySQL,
// PostgreSQL, Cassandra, and the in-memory database, Memfile.
// We'll use memfile  because it doesn't require any prior set up.
  "lease-database": {
      "type": "memfile",
      "lfc-interval": 3600
  },

// Addresses will be assigned with a lifetime of 4000 seconds.
  "valid-lifetime": 4000,

// Renew and rebind timers are commented out. This implies that options
// 58 and 59 will not be sent to the client. In this case it is up to
// the client to pick the timer values according to RFC2131. Uncomment the
// timers to send these options to the client.
//  "renew-timer": 1000,
//  "rebind-timer": 2000,

// The following list defines subnets. We have only one subnet
// here. We tell Kea that it is directly available over local interface.
  "subnet4": [
    {
       "pools": [ { "pool":  "$__POOL__" } ],
       "subnet": "$__NETWORK__",
       "interface": "$__INTERFACE__"
    }
  ]
},

// The following configures logging. It assumes that messages with at
// least informational level (info, warn, error and fatal) should be
// logged to stdout. Alternatively, you can specify stderr here, a filename
// or 'syslog', which will store output messages via syslog.
"Logging": {
    "loggers": [
        {
            "name": "kea-dhcp4",
            "output_options": [
                {
                    "output": "stdout"
                }
            ],
            "severity": "INFO"
        }
    ]
}

}